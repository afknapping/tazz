// library styles

// make angular-helpers.sass for the following stuff
[ng-click], [data-ng-click], [x-ng-click]
  cursor: pointer


// element reset

@mixin element-reset
  // Reset's every elements apperance
  // via http://stackoverflow.com/questions/16077341/how-to-reset-all-default-styles-of-the-html5-button-element
  background: none repeat scroll 0 0 transparent
  border: medium none
  border-spacing: 0
  // color: #26589F
  font-family: sans-serif
  font-size: 16px
  font-weight: normal
  line-height: 1.4
  list-style: none outside none
  margin: 0
  padding: 0
  text-align: left
  text-decoration: none
  text-indent: 0


// ngAnimate
$base-transition: 0.5s ease all

// set of mixins which works for both ng-if and and ng-show:
// https://gist.github.com/filtercake/8870073
@mixin revealTo($transition: $base-transition)
  @content
  // this is the state the element should animate towards and stay in after the animation.
  // now we define the angular specific classes for ng-show and ng-if. This is where the animation is running *towards*:
  &.ng-enter.ng-enter-active, &.ng-hide-remove, &.ng-hide-add, &.ng-leave
    @content
    transition: $transition
    display: block !important
@mixin revealFrom($transition: $base-transition)
  // at last, we define where the animation is running from:
  &.ng-enter, &.ng-hide, &.ng-leave.ng-leave-active
    @content
    transition: $transition


// call the mixins in any element like this with default transition values:
.mrsmr-colors, .lib
  +revealTo
    opacity: 1
  +revealFrom
    opacity: 0

  


// a basic class for showing the color swatches of... well, "colors"
.mrsmr-colors
  padding: 1em
  margin: 0 1em 1em 0
  font-size: 10px
  display: inline-block
  width: 4em
  text-align: center


// foreground mixins define the colors of the outlinish things like type and borders
@mixin light-foreground
  color: $white
  border: 1px solid $white
@mixin dark-foreground
  color: $black
  border: 1px solid $black

// main color mixins define the background color and use either a light or dark foreground mixin
@mixin navy
  background-color: $navy
  +light-foreground
@mixin blue
  background-color: $blue
  +dark-foreground
@mixin aqua
  background-color: $aqua
  +dark-foreground
@mixin teal
  background-color: $teal
  +dark-foreground
@mixin olive
  background-color: $olive
  +dark-foreground
@mixin green
  background-color: $green
  +dark-foreground
@mixin lime
  background-color: $lime
  +dark-foreground
@mixin yellow
  background-color: $yellow
  +dark-foreground
@mixin orange
  background-color: $orange
  +light-foreground
@mixin red
  background-color: $red
  +light-foreground
@mixin maroon
  background-color: $maroon
  +light-foreground
@mixin fuchsia
  background-color: $fuchsia
  +light-foreground
@mixin purple
  background-color: $purple
  +light-foreground
@mixin white
  background-color: $white
  +dark-foreground
@mixin silver
  background-color: $silver
  +dark-foreground
@mixin gray
  background-color: $gray
  +dark-foreground
@mixin black
  background-color: $black
  +light-foreground


// for display in the library we also need classes which use the mixins for styling
.navy
  +navy
.blue
  +blue
.aqua
  +aqua
.teal
  +teal
.olive
  +olive
.green
  +green
.lime
  +lime
.yellow
  +yellow
.orange
  +orange
.red
  +red
.maroon
  +maroon
.fuchsia
  +fuchsia
.purple
  +purple
.white
  +white
.silver
  +silver
.gray
  +gray
.black
  +black